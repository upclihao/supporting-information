def get_atom_nu(file_path):
    '''
    求分子的原子数
    '''
    f = open(file_path)
    f_lines = f.readlines()
    for index,f_line in enumerate(f_lines):
        if f_line.startswith(' NAtoms=') and f_lines[index - 1].startswith(' '):
            num = int(f_line.split()[1])
    f.close()
    return num

def smb2an(lists):
    '''
    把字符串转化为核电荷数
    '''
    ans = []
    for string in lists:
        if string == 'C':
            an = 6
        elif string == 'N':
            an = 7
        elif string == 'O':
            an = 8
        elif string == 'H':
            an = 1
        elif string == 'F':
            an = 9
        ans.append(an)
    return ans

def get_mol_coords(file_path):
    '''
    从xyz里面取坐标
    '''
    f = open(file_path)
    f_lines = f.readlines()
    f.close()
    nu = get_atom_nu(file_path)
    coords = []
    for i,f_line in enumerate(f_lines):
        if f_line.startswith('                          Input orientation: '):
            INDEX = i
    for f_line in f_lines[INDEX + 5:INDEX + 5 + nu]:
        coord = []
        coord.append(f_line.split()[1])
        coord.append(f_line.split()[3])
        coord.append(f_line.split()[4])
        coord.append(f_line.split()[5])
        coords.append(coord)
    coords = np.array(coords,dtype = np.float)
    return coords

file = '/home/lihao/qm_9_anlysis/freq_logs/000477.log'



def get_vib_fromlog(file_path):
    f = open(file_path)
    f_lines = f.readlines()
    f.close()
    freqs = []
    irs = []
    ramans = []
    for index_1,f_line in enumerate(f_lines):
        if f_line.startswith('       Frequencies ---'):
            #print(f_line)
            for freq in f_line.split()[2:]:
                freqs.append(freq)
            for ir in f_lines[index_1 + 3].split()[3:]:
                irs.append(ir)
            for raman in f_lines[index_1 + 4].split()[3:]:
                ramans.append(raman)
    return freqs,irs,ramans

def get_OH_index(COORDS):
    cr = (0.31 + 0.66) * 1.15
    oh_indexs = []
    for index_O,coord in enumerate(COORDS):
        if coord[0] == 8:
            oh_index = []
            oh_index.append(index_O)
            for index_h,coord_h in enumerate(COORDS):
                if coord_h[0] == 1:
                    if np.linalg.norm(coord[1:] - coord_h[1:]) < cr:
                        oh_index.append(index_h)
                        oh_indexs.append(oh_index)
    return oh_indexs

def assure_vib(INDEX,CONTRI):
    dat = np.array([np.sum(i ** 2) for i in CONTRI])
    dat_sort = np.sort(dat)[::-1]
    sort_index = np.argsort(dat)[::-1]
    #print(dat_sort[0] + dat_sort[1],sort_index[:2])
    if INDEX[0] in sort_index[:2] and INDEX[1] in sort_index[:2] and (dat_sort[0] + dat_sort[1]) >= 0.9:
        symbyl = True
    elif INDEX[1] == sort_index[0] and (dat_sort[0] + dat_sort[1]) >= 0.86:
        symbyl = True
    else:
        symbyl = False
    return symbyl
    
def judge_jianb(INDEXS,CONTRI):
    dat = np.array([np.sum(i ** 2) for i in CONTRI])
    dat_sort = np.sort(dat)[::-1]
    sort_index = np.argsort(dat)[::-1]
    if len(INDEXS) > 1 and sort_index[:2] in INDEXS:
        symbyl = False
    else:
        symbyl = True
    return symbyl

def get_OH_vib(OH_INDEX,file_path):
    f = open(file_path)
    f_lines = f.readlines()
    nu = get_atom_nu(file_path)
    f.close()
    vec = np.zeros((len(OH_INDEX),6))
    for i in range(len(OH_INDEX)):
        vec[i,0] = int(file_path[-10:-4])
    #print(file_path[-10:-4])
    #print(1)
    for index,f_line in enumerate(f_lines):
        #print(f_line)
        if f_line.startswith('       Frequencies ---'):
            freqs = f_line.split()[2:]
            #print(freqs)
            for freq_index,freq in enumerate(freqs):
                if np.float(freq) >= 1700:
                    ir = np.float(f_lines[index + 3].split()[3 + freq_index])
                    raman = np.float(f_lines[index + 4].split()[3 + freq_index])
                    #print(freq)
                    contributions = []
                    for f_line_ in f_lines[index + 8:index + 8 + nu * 3]:
                        contributions.append(f_line_.split()[3 + freq_index])
                    contributions = [contributions[i:i+3] for i in range(0,len(contributions),3)]
                    contributions = np.array(contributions,dtype = np.float)

                    #print(contributions)
                    for j,oh_index in enumerate(OH_INDEX):
                        #print(j)
                        if assure_vib(oh_index,contributions):
                            #print(oh_index,freq,ir,raman)
                            #print(vec[j])
                            vec[j,1:3] = oh_index
                            
                            vec[j,3],vec[j,4],vec[j,5] = freq,ir,raman
                        #print(vec[j])
        
                        #else:
                        #    pass
    return vec

print(get_OH_index(get_mol_coords(file)))
oh_indexs = get_OH_index(get_mol_coords(file))
#print(get_vib_fromlog(file))
print(get_OH_vib(oh_indexs,file))
