import numpy as np
import os

#a = np.load('/home/lihao/qm_9_anlysis/O_H/dat_OH_sym.npy')  #这里是取含有一个羟基的分子的index号

def get_atom_nu(file_path):
    '''
    求分子的原子数
    '''
    f = open(file_path)
    f_lines = f.readlines()
    f.close()
    return int(f_lines[0])

def smb2an(lists):
    '''
    把字符串转化为核电荷数
    '''
    ans = []
    for string in lists:
        if string == 'C':
            an = 6
        elif string == 'N':
            an = 7
        elif string == 'O':
            an = 8
        elif string == 'H':
            an = 1
        elif string == 'F':
            an = 9
        ans.append(an)
    return ans

def get_mol_coords(file_path):
    '''
    从xyz里面取坐标
    '''
    f = open(file_path)
    f_lines = f.readlines()
    f.close()
    mol_smb = []
    mol_xyz = []
    for i,f_line in enumerate(f_lines):
        if f_line.startswith('C') or f_line.startswith('H') \
        or f_line.startswith('N') or f_line.startswith('O') \
        or f_line.startswith('F'):
            init = i
            break
    nu = get_atom_nu(file_path)
    for line in f_lines[i:i+nu]:
        mol_smb.append(line.split()[0])
        mol_xyz.append(line.split()[1:4])
    mol_ans = smb2an(mol_smb)
    mol_xyz = np.array(mol_xyz,dtype = 'float64')
    mol_coords = np.zeros((nu,4))
    mol_coords[:,0] = mol_ans
    mol_coords[:,1:] = mol_xyz
    return mol_coords

def fc(r):
    global R
    return 0.5 * (np.cos(np.pi * r / R) + 1)

def get_G2_des_fromxyz(xyz_file_path):
    '''
    算距离对称函数值
    '''
    global R
    coords = get_mol_coords(xyz_file_path)

    for index_H,i in enumerate(coords):
        cr = (0.31 + 0.66) * 1.15
        if i[0] == 1:
            for j in coords[np.delete(np.arange(coords.shape[0]),index_H)]:
                if j[0] == 8 and np.linalg.norm(i[1:] - j[1:]) < cr:
                    O_coord = j

    atoms_cutoff = []
    for index_atom,i in enumerate(coords):
        if np.linalg.norm(i[1:] - O_coord[1:]) < R:
            atoms_cutoff.append(i)

    paras = np.loadtxt('/home/lihao/qm_9_anlysis/new_para/paras_26r.txt')
    #print(paras.shape)
    data_dis_mat = np.zeros((paras.shape[0],))

    for index,i in enumerate(paras):
        G2 = 0
        for j in atoms_cutoff:
            if j[0] == i[0] and (j != O_coord).any():
                dis = np.linalg.norm(j[1:] - O_coord[1:])
                G2 += np.exp(-1 * (i[1]) * (dis - i[2]) ** 2) * fc(dis)
        data_dis_mat[index] = G2
    
    return data_dis_mat

def cosijk(O,H,X):
    OX = np.linalg.norm(O[1:] - X[1:])
    OH = np.linalg.norm(O[1:] - H[1:])
    HX = np.linalg.norm(H[1:] - X[1:])
    return (OX ** 2 + OH ** 2 - HX ** 2) / (2 * OX * OH)

    

def get_G4_des_fromxyz(xyz_file_path):
    '''
    求角度对称函数值
    '''
    global R
    paras = np.loadtxt('/home/lihao/qm_9_anlysis/new_para/paras_6a.txt')
    coords = get_mol_coords(xyz_file_path)
    
    for index_H,i in enumerate(coords):
        cr = (0.31 + 0.66) * 1.15
        if i[0] == 1:
            for j in coords[np.delete(np.arange(coords.shape[0]),index_H)]:
                if j[0] == 8 and np.linalg.norm(i[1:] - j[1:]) < cr:
                    O_coord = j
                    H_coord = i
    
    atoms_cutoff = []
    for index_atom,i in enumerate(coords):
        if np.linalg.norm(i[1:] - O_coord[1:]) < R:
            atoms_cutoff.append(i)
    
    data_ang_mat = np.zeros((paras.shape[0],))
    
    for index,i in enumerate(paras):
        #print(i)
        G4 = 0
        for j in atoms_cutoff:
            if j[0] == i[0] and (j != O_coord).any() and (j != H_coord).any():
                disik = np.linalg.norm(j[1:] - O_coord[1:])
                disij = np.linalg.norm(H_coord[1:] - O_coord[1:])
                G4 += 2 ** (1 - i[3]) * ((1 + i[2] * cosijk(O_coord,H_coord,j)) ** i[3]) * \
                np.exp(-1 * i[1] * (disij ** 2 + disik ** 2)) * fc(disij) * fc(disik)
        data_ang_mat[index] = G4
    return data_ang_mat

def get_sym_fromxyz(xyz_file_path):
    '''
    组合输出结果
    '''
    dis_sym = get_G2_des_fromxyz(xyz_file_path)
    ang_sym = get_G4_des_fromxyz(xyz_file_path)
    return np.concatenate((dis_sym,ang_sym),0)

#test_file = '/home/lihao/qm_9_anlysis/qm_9_xyz/dsgdb9nsd_004791.xyz'
#
#R=3.2
#print(get_G2_des_fromxyz(test_file).shape)
for i in np.array([3.2,3.4,3.6,3.8,4.2,4.4,4.6,4.8,5.2,5.4,5.6,5.8,
                   6.2,6.4,6.6,6.8,7.2,7.4,7.6,7.8]):

    print(i)
    R = i
    data = []
    for roots,dirs,files in os.walk('/home/lihao/qm_9_anlysis/qm_9_xyz/'):
        for file in files:
            if int(file[10:16]) in a[:,0]:
                data_mol = np.zeros((129,))
                data_mol[0] = int(file[10:16])
                #print(file)
                data_mol[1:] = get_sym_fromxyz('/home/lihao/qm_9_anlysis/qm_9_xyz/' + file)
                data.append(data_mol)
                
    data = np.array(data)
    data = data[data[:,0].argsort()]
    
   # np.save('/home/lihao/qm_9_anlysis/new_para//dat_OH_sym_rad{}.npy'.format(str(i)),data)
    pint(data)
